/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ValidatorInterface extends ethers.utils.Interface {
  functions: {
    "addCase(address,string,address,address,uint256,uint256)": FunctionFragment;
    "adminRole(address)": FunctionFragment;
    "appeal(string)": FunctionFragment;
    "casesInfo(string)": FunctionFragment;
    "decideByAdmin(string,string,string)": FunctionFragment;
    "encode(string)": FunctionFragment;
    "erc20Interface()": FunctionFragment;
    "evaluate(string,string)": FunctionFragment;
    "fee()": FunctionFragment;
    "getTotalCollateral()": FunctionFragment;
    "getUserDecision(string,address)": FunctionFragment;
    "getUserResultInCase(string,address)": FunctionFragment;
    "maxPercentValue()": FunctionFragment;
    "minPercentValue()": FunctionFragment;
    "owner()": FunctionFragment;
    "play(string,uint256,bytes32,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address,bool)": FunctionFragment;
    "setCaseStatusDone(string)": FunctionFragment;
    "setMaxPercent(uint256)": FunctionFragment;
    "setMinPercent(uint256)": FunctionFragment;
    "totalCollateral()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userCanClaimReward(string,address)": FunctionFragment;
    "userClaimReward(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCase",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "adminRole", values: [string]): string;
  encodeFunctionData(functionFragment: "appeal", values: [string]): string;
  encodeFunctionData(functionFragment: "casesInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "decideByAdmin",
    values: [string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "encode", values: [string]): string;
  encodeFunctionData(
    functionFragment: "erc20Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evaluate",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDecision",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserResultInCase",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPercentValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPercentValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [string, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setCaseStatusDone",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userCanClaimReward",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimReward",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addCase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "adminRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "casesInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decideByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "encode", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "erc20Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evaluate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserResultInCase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPercentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPercentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCaseStatusDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMaxPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCanClaimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimReward",
    data: BytesLike
  ): Result;

  events: {
    "AddCase(string,string,address,address,uint256)": EventFragment;
    "CaseAppeal(string,address)": EventFragment;
    "CaseGenResult(address,string,uint256,bytes32,string)": EventFragment;
    "CaseVoteDone(string)": EventFragment;
    "ChangeStatus(string,string)": EventFragment;
    "ClaimReward(string,address,bool)": EventFragment;
    "DoneResult(string,string)": EventFragment;
    "EvaluateResult(string,string,uint256,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetAdmins(address,address)": EventFragment;
    "SetMaxPercent(address,uint256)": EventFragment;
    "SetMinPercent(address,uint256)": EventFragment;
    "UserDecision(address,string,uint256,bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CaseAppeal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CaseGenResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CaseVoteDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangeStatus"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DoneResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvaluateResult"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmins"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMaxPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMinPercent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDecision"): EventFragment;
}

export type AddCaseEvent = TypedEvent<
  [string, string, string, string, BigNumber] & {
    txKey: string;
    txId: string;
    seller: string;
    buyer: string;
    amount: BigNumber;
  }
>;

export type CaseAppealEvent = TypedEvent<
  [string, string] & { txKey: string; appealAddress: string }
>;

export type CaseGenResultEvent = TypedEvent<
  [string, string, BigNumber, string, string] & {
    sender: string;
    txKey: string;
    amount: BigNumber;
    answer: string;
    remark: string;
  }
>;

export type CaseVoteDoneEvent = TypedEvent<[string] & { txKey: string }>;

export type ChangeStatusEvent = TypedEvent<
  [string, string] & { txKey: string; status: string }
>;

export type ClaimRewardEvent = TypedEvent<
  [string, string, boolean] & { txKey: string; user: string; result: boolean }
>;

export type DoneResultEvent = TypedEvent<
  [string, string] & { txKey: string; result: string }
>;

export type EvaluateResultEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    txKey: string;
    result: string;
    buyerAmount: BigNumber;
    sellerAmount: BigNumber;
    updateAt: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetAdminsEvent = TypedEvent<
  [string, string] & { user: string; admin: string }
>;

export type SetMaxPercentEvent = TypedEvent<
  [string, BigNumber] & { user: string; percent: BigNumber }
>;

export type SetMinPercentEvent = TypedEvent<
  [string, BigNumber] & { user: string; percent: BigNumber }
>;

export type UserDecisionEvent = TypedEvent<
  [string, string, BigNumber, string, string] & {
    sender: string;
    txKey: string;
    amount: BigNumber;
    answer: string;
    remark: string;
  }
>;

export class Validator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ValidatorInterface;

  functions: {
    addCase(
      _token: string,
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminRole(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    appeal(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    casesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        number,
        string
      ] & {
        seller: string;
        buyer: string;
        token: string;
        currentValue: BigNumber;
        totalValue: BigNumber;
        fund: BigNumber;
        winnerAmount: BigNumber;
        result: string;
        resultAt: BigNumber;
        randomness: string;
        remark: BigNumber;
        status: number;
        decryptKey: string;
      }
    >;

    decideByAdmin(
      _key: string,
      _decryptKey: string,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    encode(_key: string, overrides?: CallOverrides): Promise<[string]>;

    erc20Interface(overrides?: CallOverrides): Promise<[string]>;

    evaluate(
      _key: string,
      _decryptKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTotalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserDecision(
      _key: string,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserResultInCase(
      _key: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _isWin: boolean; _betAmount: BigNumber }
    >;

    maxPercentValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPercentValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    play(
      _key: string,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      _isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCaseStatusDone(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxPercent(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPercent(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userCanClaimReward(
      _key: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userClaimReward(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCase(
    _token: string,
    _txId: string,
    _seller: string,
    _buyer: string,
    _remark: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminRole(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  appeal(
    _key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  casesInfo(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      number,
      string
    ] & {
      seller: string;
      buyer: string;
      token: string;
      currentValue: BigNumber;
      totalValue: BigNumber;
      fund: BigNumber;
      winnerAmount: BigNumber;
      result: string;
      resultAt: BigNumber;
      randomness: string;
      remark: BigNumber;
      status: number;
      decryptKey: string;
    }
  >;

  decideByAdmin(
    _key: string,
    _decryptKey: string,
    _result: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  encode(_key: string, overrides?: CallOverrides): Promise<string>;

  erc20Interface(overrides?: CallOverrides): Promise<string>;

  evaluate(
    _key: string,
    _decryptKey: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getTotalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  getUserDecision(
    _key: string,
    _userReply: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserResultInCase(
    _key: string,
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _isWin: boolean; _betAmount: BigNumber }>;

  maxPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

  minPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  play(
    _key: string,
    _amount: BigNumberish,
    _answer: BytesLike,
    _remark: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    _isAdmin: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCaseStatusDone(
    _key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxPercent(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPercent(
    _value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userCanClaimReward(
    _key: string,
    _user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userClaimReward(
    _key: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCase(
      _token: string,
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    adminRole(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    appeal(_key: string, overrides?: CallOverrides): Promise<void>;

    casesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        number,
        string
      ] & {
        seller: string;
        buyer: string;
        token: string;
        currentValue: BigNumber;
        totalValue: BigNumber;
        fund: BigNumber;
        winnerAmount: BigNumber;
        result: string;
        resultAt: BigNumber;
        randomness: string;
        remark: BigNumber;
        status: number;
        decryptKey: string;
      }
    >;

    decideByAdmin(
      _key: string,
      _decryptKey: string,
      _result: string,
      overrides?: CallOverrides
    ): Promise<void>;

    encode(_key: string, overrides?: CallOverrides): Promise<string>;

    erc20Interface(overrides?: CallOverrides): Promise<string>;

    evaluate(
      _key: string,
      _decryptKey: string,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber, BigNumber, BigNumber]>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDecision(
      _key: string,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserResultInCase(
      _key: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _isWin: boolean; _betAmount: BigNumber }
    >;

    maxPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    minPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    play(
      _key: string,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      _admin: string,
      _isAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setCaseStatusDone(_key: string, overrides?: CallOverrides): Promise<void>;

    setMaxPercent(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinPercent(
      _value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userCanClaimReward(
      _key: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userClaimReward(_key: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddCase(string,string,address,address,uint256)"(
      txKey?: null,
      txId?: null,
      seller?: null,
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        txKey: string;
        txId: string;
        seller: string;
        buyer: string;
        amount: BigNumber;
      }
    >;

    AddCase(
      txKey?: null,
      txId?: null,
      seller?: null,
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, string, BigNumber],
      {
        txKey: string;
        txId: string;
        seller: string;
        buyer: string;
        amount: BigNumber;
      }
    >;

    "CaseAppeal(string,address)"(
      txKey?: null,
      appealAddress?: null
    ): TypedEventFilter<
      [string, string],
      { txKey: string; appealAddress: string }
    >;

    CaseAppeal(
      txKey?: null,
      appealAddress?: null
    ): TypedEventFilter<
      [string, string],
      { txKey: string; appealAddress: string }
    >;

    "CaseGenResult(address,string,uint256,bytes32,string)"(
      sender?: null,
      txKey?: null,
      amount?: null,
      answer?: null,
      remark?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        sender: string;
        txKey: string;
        amount: BigNumber;
        answer: string;
        remark: string;
      }
    >;

    CaseGenResult(
      sender?: null,
      txKey?: null,
      amount?: null,
      answer?: null,
      remark?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        sender: string;
        txKey: string;
        amount: BigNumber;
        answer: string;
        remark: string;
      }
    >;

    "CaseVoteDone(string)"(
      txKey?: null
    ): TypedEventFilter<[string], { txKey: string }>;

    CaseVoteDone(txKey?: null): TypedEventFilter<[string], { txKey: string }>;

    "ChangeStatus(string,string)"(
      txKey?: null,
      status?: null
    ): TypedEventFilter<[string, string], { txKey: string; status: string }>;

    ChangeStatus(
      txKey?: null,
      status?: null
    ): TypedEventFilter<[string, string], { txKey: string; status: string }>;

    "ClaimReward(string,address,bool)"(
      txKey?: null,
      user?: null,
      result?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { txKey: string; user: string; result: boolean }
    >;

    ClaimReward(
      txKey?: null,
      user?: null,
      result?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { txKey: string; user: string; result: boolean }
    >;

    "DoneResult(string,string)"(
      txKey?: null,
      result?: null
    ): TypedEventFilter<[string, string], { txKey: string; result: string }>;

    DoneResult(
      txKey?: null,
      result?: null
    ): TypedEventFilter<[string, string], { txKey: string; result: string }>;

    "EvaluateResult(string,string,uint256,uint256,uint256)"(
      txKey?: null,
      result?: null,
      buyerAmount?: null,
      sellerAmount?: null,
      updateAt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        txKey: string;
        result: string;
        buyerAmount: BigNumber;
        sellerAmount: BigNumber;
        updateAt: BigNumber;
      }
    >;

    EvaluateResult(
      txKey?: null,
      result?: null,
      buyerAmount?: null,
      sellerAmount?: null,
      updateAt?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        txKey: string;
        result: string;
        buyerAmount: BigNumber;
        sellerAmount: BigNumber;
        updateAt: BigNumber;
      }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetAdmins(address,address)"(
      user?: null,
      admin?: null
    ): TypedEventFilter<[string, string], { user: string; admin: string }>;

    SetAdmins(
      user?: null,
      admin?: null
    ): TypedEventFilter<[string, string], { user: string; admin: string }>;

    "SetMaxPercent(address,uint256)"(
      user?: null,
      percent?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; percent: BigNumber }
    >;

    SetMaxPercent(
      user?: null,
      percent?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; percent: BigNumber }
    >;

    "SetMinPercent(address,uint256)"(
      user?: null,
      percent?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; percent: BigNumber }
    >;

    SetMinPercent(
      user?: null,
      percent?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; percent: BigNumber }
    >;

    "UserDecision(address,string,uint256,bytes32,string)"(
      sender?: null,
      txKey?: null,
      amount?: null,
      answer?: null,
      remark?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        sender: string;
        txKey: string;
        amount: BigNumber;
        answer: string;
        remark: string;
      }
    >;

    UserDecision(
      sender?: null,
      txKey?: null,
      amount?: null,
      answer?: null,
      remark?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string],
      {
        sender: string;
        txKey: string;
        amount: BigNumber;
        answer: string;
        remark: string;
      }
    >;
  };

  estimateGas: {
    addCase(
      _token: string,
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminRole(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    appeal(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    casesInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    decideByAdmin(
      _key: string,
      _decryptKey: string,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    encode(_key: string, overrides?: CallOverrides): Promise<BigNumber>;

    erc20Interface(overrides?: CallOverrides): Promise<BigNumber>;

    evaluate(
      _key: string,
      _decryptKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDecision(
      _key: string,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserResultInCase(
      _key: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    minPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _key: string,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      _isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCaseStatusDone(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxPercent(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPercent(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userCanClaimReward(
      _key: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userClaimReward(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCase(
      _token: string,
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminRole(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appeal(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    casesInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decideByAdmin(
      _key: string,
      _decryptKey: string,
      _result: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    encode(
      _key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    erc20Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evaluate(
      _key: string,
      _decryptKey: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDecision(
      _key: string,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserResultInCase(
      _key: string,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPercentValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPercentValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      _key: string,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      _isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCaseStatusDone(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxPercent(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPercent(
      _value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userCanClaimReward(
      _key: string,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userClaimReward(
      _key: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
