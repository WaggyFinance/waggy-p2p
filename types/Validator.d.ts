/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ValidatorInterface extends ethers.utils.Interface {
  functions: {
    "addCase(uint256,address,address,address,uint256,uint256)": FunctionFragment;
    "claimReward(uint256)": FunctionFragment;
    "erc20Interface()": FunctionFragment;
    "evaluate(uint256,bytes32)": FunctionFragment;
    "fee()": FunctionFragment;
    "getCaseInfo(uint256)": FunctionFragment;
    "getTotalCollateral()": FunctionFragment;
    "getUserDecision(uint256,address)": FunctionFragment;
    "getUserReply(uint256,address)": FunctionFragment;
    "getUserResultInCase(uint256,address)": FunctionFragment;
    "maxPercentValue()": FunctionFragment;
    "minPercentValue()": FunctionFragment;
    "owner()": FunctionFragment;
    "play(uint256,uint256,bytes32,string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "totalCollateral()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCase",
    values: [BigNumberish, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Interface",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "evaluate",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCaseInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserDecision",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReply",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserResultInCase",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "maxPercentValue",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minPercentValue",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "play",
    values: [BigNumberish, BigNumberish, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addCase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Interface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "evaluate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCaseInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserDecision",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserResultInCase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxPercentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minPercentValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CASE_GEN_RESULT(address,uint256,uint256,bytes32,string)": EventFragment;
    "CASE_VOTE_DONE(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "USER_DECISION(address,uint256,uint256,bytes32,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CASE_GEN_RESULT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CASE_VOTE_DONE"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "USER_DECISION"): EventFragment;
}

export type CASE_GEN_RESULTEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string] & {
    _sender: string;
    _caseId: BigNumber;
    _amount: BigNumber;
    _answer: string;
    _remark: string;
  }
>;

export type CASE_VOTE_DONEEvent = TypedEvent<
  [BigNumber] & { _caseId: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type USER_DECISIONEvent = TypedEvent<
  [string, BigNumber, BigNumber, string, string] & {
    _sender: string;
    _caseId: BigNumber;
    _amount: BigNumber;
    _answer: string;
    _remark: string;
  }
>;

export class Validator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ValidatorInterface;

  functions: {
    addCase(
      _blockNumber: BigNumberish,
      _token: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimReward(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    erc20Interface(overrides?: CallOverrides): Promise<[string]>;

    evaluate(
      _blockNumber: BigNumberish,
      _randomness: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCaseInfo(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        seller: string;
        buyer: string;
        token: string;
        currentValue: BigNumber;
        totalValue: BigNumber;
        fund: BigNumber;
        result: string;
        resultAt: BigNumber;
        randomness: string;
        remark: BigNumber;
        status: BigNumber;
      }
    >;

    getTotalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserDecision(
      _blockNumber: BigNumberish,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getUserReply(
      _blockNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, boolean] & {
        answer: string;
        amount: BigNumber;
        remark: string;
        createdAt: BigNumber;
        claimed: boolean;
      }
    >;

    getUserResultInCase(
      _blockNumber: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _isWin: boolean; _betAmount: BigNumber }
    >;

    maxPercentValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    minPercentValue(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    play(
      _blockNumber: BigNumberish,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCase(
    _blockNumber: BigNumberish,
    _token: string,
    _seller: string,
    _buyer: string,
    _remark: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimReward(
    _blockNumber: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  erc20Interface(overrides?: CallOverrides): Promise<string>;

  evaluate(
    _blockNumber: BigNumberish,
    _randomness: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(overrides?: CallOverrides): Promise<BigNumber>;

  getCaseInfo(
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      seller: string;
      buyer: string;
      token: string;
      currentValue: BigNumber;
      totalValue: BigNumber;
      fund: BigNumber;
      result: string;
      resultAt: BigNumber;
      randomness: string;
      remark: BigNumber;
      status: BigNumber;
    }
  >;

  getTotalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  getUserDecision(
    _blockNumber: BigNumberish,
    _userReply: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getUserReply(
    _blockNumber: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, boolean] & {
      answer: string;
      amount: BigNumber;
      remark: string;
      createdAt: BigNumber;
      claimed: boolean;
    }
  >;

  getUserResultInCase(
    _blockNumber: BigNumberish,
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<[boolean, BigNumber] & { _isWin: boolean; _betAmount: BigNumber }>;

  maxPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

  minPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  play(
    _blockNumber: BigNumberish,
    _amount: BigNumberish,
    _answer: BytesLike,
    _remark: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCase(
      _blockNumber: BigNumberish,
      _token: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimReward(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20Interface(overrides?: CallOverrides): Promise<string>;

    evaluate(
      _blockNumber: BigNumberish,
      _randomness: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getCaseInfo(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        seller: string;
        buyer: string;
        token: string;
        currentValue: BigNumber;
        totalValue: BigNumber;
        fund: BigNumber;
        result: string;
        resultAt: BigNumber;
        randomness: string;
        remark: BigNumber;
        status: BigNumber;
      }
    >;

    getTotalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDecision(
      _blockNumber: BigNumberish,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getUserReply(
      _blockNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, boolean] & {
        answer: string;
        amount: BigNumber;
        remark: string;
        createdAt: BigNumber;
        claimed: boolean;
      }
    >;

    getUserResultInCase(
      _blockNumber: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, BigNumber] & { _isWin: boolean; _betAmount: BigNumber }
    >;

    maxPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    minPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    play(
      _blockNumber: BigNumberish,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CASE_GEN_RESULT(address,uint256,uint256,bytes32,string)"(
      _sender?: null,
      _caseId?: null,
      _amount?: null,
      _answer?: null,
      _remark?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        _sender: string;
        _caseId: BigNumber;
        _amount: BigNumber;
        _answer: string;
        _remark: string;
      }
    >;

    CASE_GEN_RESULT(
      _sender?: null,
      _caseId?: null,
      _amount?: null,
      _answer?: null,
      _remark?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        _sender: string;
        _caseId: BigNumber;
        _amount: BigNumber;
        _answer: string;
        _remark: string;
      }
    >;

    "CASE_VOTE_DONE(uint256)"(
      _caseId?: null
    ): TypedEventFilter<[BigNumber], { _caseId: BigNumber }>;

    CASE_VOTE_DONE(
      _caseId?: null
    ): TypedEventFilter<[BigNumber], { _caseId: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "USER_DECISION(address,uint256,uint256,bytes32,string)"(
      _sender?: null,
      _caseId?: null,
      _amount?: null,
      _answer?: null,
      _remark?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        _sender: string;
        _caseId: BigNumber;
        _amount: BigNumber;
        _answer: string;
        _remark: string;
      }
    >;

    USER_DECISION(
      _sender?: null,
      _caseId?: null,
      _amount?: null,
      _answer?: null,
      _remark?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        _sender: string;
        _caseId: BigNumber;
        _amount: BigNumber;
        _answer: string;
        _remark: string;
      }
    >;
  };

  estimateGas: {
    addCase(
      _blockNumber: BigNumberish,
      _token: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimReward(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    erc20Interface(overrides?: CallOverrides): Promise<BigNumber>;

    evaluate(
      _blockNumber: BigNumberish,
      _randomness: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    getCaseInfo(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getUserDecision(
      _blockNumber: BigNumberish,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReply(
      _blockNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserResultInCase(
      _blockNumber: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    minPercentValue(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      _blockNumber: BigNumberish,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCase(
      _blockNumber: BigNumberish,
      _token: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimReward(
      _blockNumber: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    erc20Interface(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    evaluate(
      _blockNumber: BigNumberish,
      _randomness: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCaseInfo(
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalCollateral(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserDecision(
      _blockNumber: BigNumberish,
      _userReply: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReply(
      _blockNumber: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserResultInCase(
      _blockNumber: BigNumberish,
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxPercentValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPercentValue(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      _blockNumber: BigNumberish,
      _amount: BigNumberish,
      _answer: BytesLike,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
