/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BlackListUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlackListUser__factory>;
    getContractFactory(
      name: "IMigratorChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMigratorChef__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "MasterWaggy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterWaggy__factory>;
    getContractFactory(
      name: "BUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BUSD__factory>;
    getContractFactory(
      name: "FactoryStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FactoryStorage__factory>;
    getContractFactory(
      name: "FeeCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeCalculator__factory>;
    getContractFactory(
      name: "Merchant",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Merchant__factory>;
    getContractFactory(
      name: "MerchantStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerchantStorage__factory>;
    getContractFactory(
      name: "P2PFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.P2PFactory__factory>;
    getContractFactory(
      name: "RewardCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCalculator__factory>;
    getContractFactory(
      name: "WaggyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WaggyToken__factory>;
    getContractFactory(
      name: "WERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WERC20__factory>;
    getContractFactory(
      name: "Validator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Validator__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BlackListUser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlackListUser>;
    getContractAt(
      name: "IMigratorChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMigratorChef>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "MasterWaggy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterWaggy>;
    getContractAt(
      name: "BUSD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BUSD>;
    getContractAt(
      name: "FactoryStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FactoryStorage>;
    getContractAt(
      name: "FeeCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeCalculator>;
    getContractAt(
      name: "Merchant",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Merchant>;
    getContractAt(
      name: "MerchantStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerchantStorage>;
    getContractAt(
      name: "P2PFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.P2PFactory>;
    getContractAt(
      name: "RewardCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCalculator>;
    getContractAt(
      name: "WaggyToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WaggyToken>;
    getContractAt(
      name: "WERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WERC20>;
    getContractAt(
      name: "Validator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Validator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
