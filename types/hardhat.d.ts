/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721__factory>;
    getContractFactory(
      name: "ERC721URIStorage",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721URIStorage__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BlackListUser",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BlackListUser__factory>;
    getContractFactory(
      name: "AvatarNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvatarNFT__factory>;
    getContractFactory(
      name: "GasStation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasStation__factory>;
    getContractFactory(
      name: "WNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WNFT__factory>;
    getContractFactory(
      name: "MasterChef",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterChef__factory>;
    getContractFactory(
      name: "MasterWaggy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MasterWaggy__factory>;
    getContractFactory(
      name: "AvatarNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AvatarNFT__factory>;
    getContractFactory(
      name: "WaggyNFT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WaggyNFT__factory>;
    getContractFactory(
      name: "WaggyStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WaggyStaking__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "FeeCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeCalculator__factory>;
    getContractFactory(
      name: "IValidator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValidator__factory>;
    getContractFactory(
      name: "IWBNB",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWBNB__factory>;
    getContractFactory(
      name: "MerchantMultiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerchantMultiToken__factory>;
    getContractFactory(
      name: "RewardCalculator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardCalculator__factory>;
    getContractFactory(
      name: "WaggyToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WaggyToken__factory>;
    getContractFactory(
      name: "WERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WERC20__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "WNativeRelayer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WNativeRelayer__factory>;
    getContractFactory(
      name: "Timelock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timelock__factory>;
    getContractFactory(
      name: "IGOV",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGOV__factory>;
    getContractFactory(
      name: "Validator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Validator__factory>;

    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721>;
    getContractAt(
      name: "ERC721URIStorage",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721URIStorage>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BlackListUser",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BlackListUser>;
    getContractAt(
      name: "AvatarNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvatarNFT>;
    getContractAt(
      name: "GasStation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GasStation>;
    getContractAt(
      name: "WNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WNFT>;
    getContractAt(
      name: "MasterChef",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterChef>;
    getContractAt(
      name: "MasterWaggy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MasterWaggy>;
    getContractAt(
      name: "AvatarNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AvatarNFT>;
    getContractAt(
      name: "WaggyNFT",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WaggyNFT>;
    getContractAt(
      name: "WaggyStaking",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WaggyStaking>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "FeeCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeCalculator>;
    getContractAt(
      name: "IValidator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IValidator>;
    getContractAt(
      name: "IWBNB",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWBNB>;
    getContractAt(
      name: "MerchantMultiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MerchantMultiToken>;
    getContractAt(
      name: "RewardCalculator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardCalculator>;
    getContractAt(
      name: "WaggyToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WaggyToken>;
    getContractAt(
      name: "WERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WERC20>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "WNativeRelayer",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WNativeRelayer>;
    getContractAt(
      name: "Timelock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Timelock>;
    getContractAt(
      name: "IGOV",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGOV>;
    getContractAt(
      name: "Validator",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Validator>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
