/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface P2PFactoryInterface extends ethers.utils.Interface {
  functions: {
    "createNewMerchant(address,address,address,address,address)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getFactoryStorage()": FunctionFragment;
    "getMerchantByToken(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateMechant(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createNewMerchant",
    values: [string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFactoryStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMerchantByToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMechant",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewMerchant",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFactoryStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerchantByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMechant",
    data: BytesLike
  ): Result;

  events: {
    "NewMerchantAddress(address)": EventFragment;
    "NewMerchantStorageAddress(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateFeeCalculator(address)": EventFragment;
    "UpdateGOVInMerchant(address)": EventFragment;
    "UpdateMerchantAddress(address,address)": EventFragment;
    "UpdateRewardCalculator(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NewMerchantAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMerchantStorageAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeCalculator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateGOVInMerchant"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateMerchantAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardCalculator"): EventFragment;
}

export type NewMerchantAddressEvent = TypedEvent<
  [string] & { merchantAddress: string }
>;

export type NewMerchantStorageAddressEvent = TypedEvent<
  [string] & { merchantStorageAddress: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpdateFeeCalculatorEvent = TypedEvent<
  [string] & { feeCalculator: string }
>;

export type UpdateGOVInMerchantEvent = TypedEvent<[string] & { gov: string }>;

export type UpdateMerchantAddressEvent = TypedEvent<
  [string, string] & { token: string; merchantAddress: string }
>;

export type UpdateRewardCalculatorEvent = TypedEvent<
  [string] & { rewardCalculator: string }
>;

export class P2PFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: P2PFactoryInterface;

  functions: {
    createNewMerchant(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _blackListUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getFactoryStorage(overrides?: CallOverrides): Promise<[string]>;

    getMerchantByToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateMechant(
      _token: string,
      _merchantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createNewMerchant(
    _token: string,
    _gov: string,
    _rewardCalculator: string,
    _feeCalculator: string,
    _blackListUser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getFactoryStorage(overrides?: CallOverrides): Promise<string>;

  getMerchantByToken(
    _token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateMechant(
    _token: string,
    _merchantAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNewMerchant(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _blackListUser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getFactoryStorage(overrides?: CallOverrides): Promise<string>;

    getMerchantByToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMechant(
      _token: string,
      _merchantAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "NewMerchantAddress(address)"(
      merchantAddress?: null
    ): TypedEventFilter<[string], { merchantAddress: string }>;

    NewMerchantAddress(
      merchantAddress?: null
    ): TypedEventFilter<[string], { merchantAddress: string }>;

    "NewMerchantStorageAddress(address)"(
      merchantStorageAddress?: null
    ): TypedEventFilter<[string], { merchantStorageAddress: string }>;

    NewMerchantStorageAddress(
      merchantStorageAddress?: null
    ): TypedEventFilter<[string], { merchantStorageAddress: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UpdateFeeCalculator(address)"(
      feeCalculator?: null
    ): TypedEventFilter<[string], { feeCalculator: string }>;

    UpdateFeeCalculator(
      feeCalculator?: null
    ): TypedEventFilter<[string], { feeCalculator: string }>;

    "UpdateGOVInMerchant(address)"(
      gov?: null
    ): TypedEventFilter<[string], { gov: string }>;

    UpdateGOVInMerchant(
      gov?: null
    ): TypedEventFilter<[string], { gov: string }>;

    "UpdateMerchantAddress(address,address)"(
      token?: null,
      merchantAddress?: null
    ): TypedEventFilter<
      [string, string],
      { token: string; merchantAddress: string }
    >;

    UpdateMerchantAddress(
      token?: null,
      merchantAddress?: null
    ): TypedEventFilter<
      [string, string],
      { token: string; merchantAddress: string }
    >;

    "UpdateRewardCalculator(address)"(
      rewardCalculator?: null
    ): TypedEventFilter<[string], { rewardCalculator: string }>;

    UpdateRewardCalculator(
      rewardCalculator?: null
    ): TypedEventFilter<[string], { rewardCalculator: string }>;
  };

  estimateGas: {
    createNewMerchant(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _blackListUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getFactoryStorage(overrides?: CallOverrides): Promise<BigNumber>;

    getMerchantByToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateMechant(
      _token: string,
      _merchantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewMerchant(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _blackListUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFactoryStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMerchantByToken(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateMechant(
      _token: string,
      _merchantAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
