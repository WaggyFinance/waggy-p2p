/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { P2PFactory, P2PFactoryInterface } from "../P2PFactory";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factoryData",
        type: "address",
      },
      {
        internalType: "address",
        name: "_feeCollector",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "merchantAddress",
        type: "address",
      },
    ],
    name: "NewMerchantAddress",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "merchantStorageAddress",
        type: "address",
      },
    ],
    name: "NewMerchantStorageAddress",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "feeCalculator",
        type: "address",
      },
    ],
    name: "UpdateFeeCalculator",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "gov",
        type: "address",
      },
    ],
    name: "UpdateGOVInMerchant",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "merchantAddress",
        type: "address",
      },
    ],
    name: "UpdateMerchantAddress",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "rewardCalculator",
        type: "address",
      },
    ],
    name: "UpdateRewardCalculator",
    type: "event",
  },
  {
    inputs: [],
    name: "feeCollector",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getFactoryStorage",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "getMerchantByToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
      {
        internalType: "address",
        name: "_merchantAddress",
        type: "address",
      },
    ],
    name: "updateMechant",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516106b13803806106b183398101604081905261002f916100e8565b6100383361007c565b6001600160a01b03811661004b57600080fd5b600180546001600160a01b039384166001600160a01b0319918216179091556002805492909316911617905561011a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146100e357600080fd5b919050565b600080604083850312156100fa578182fd5b610103836100cc565b9150610111602084016100cc565b90509250929050565b610588806101296000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a333d0d31161005b578063a333d0d3146100c6578063a6216e65146100d9578063c415b95c146100ec578063f2fde38b146100ff57600080fd5b8063715018a6146100825780638da197cc1461008c5780638da5cb5b146100b5575b600080fd5b61008a610112565b005b6001546001600160a01b03165b6040516001600160a01b03909116815260200160405180910390f35b6000546001600160a01b0316610099565b61008a6100d4366004610505565b61017d565b6100996100e73660046104c6565b610286565b600254610099906001600160a01b031681565b61008a61010d3660046104c6565b61039e565b6000546001600160a01b031633146101715760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61017b6000610469565b565b6000546001600160a01b031633146101d75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610168565b60015460405163c875d82960e01b81526001600160a01b03848116600483015283811660248301529091169063c875d82990604401600060405180830381600087803b15801561022657600080fd5b505af115801561023a573d6000803e3d6000fd5b5050604080516001600160a01b038087168252851660208201527f023b25c257a2323927268063317c05aa4cb34311e6af91d28185446df1eccace935001905060405180910390a15050565b600154604051635b578cc960e01b81526001600160a01b0383811660048301526000928392911690635b578cc99060240160206040518083038186803b1580156102cf57600080fd5b505afa1580156102e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030791906104e9565b6001600160a01b0316141561031b57600080fd5b600154604051635b578cc960e01b81526001600160a01b03848116600483015290911690635b578cc99060240160206040518083038186803b15801561036057600080fd5b505afa158015610374573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039891906104e9565b92915050565b6000546001600160a01b031633146103f85760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610168565b6001600160a01b03811661045d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610168565b61046681610469565b50565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156104d7578081fd5b81356104e28161053d565b9392505050565b6000602082840312156104fa578081fd5b81516104e28161053d565b60008060408385031215610517578081fd5b82356105228161053d565b915060208301356105328161053d565b809150509250929050565b6001600160a01b038116811461046657600080fdfea26469706673582212204983427e8387c063f538448eedea03178edb0e27fc834a579086c6815ca253fe64736f6c63430008040033";

export class P2PFactory__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _factoryData: string,
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<P2PFactory> {
    return super.deploy(
      _factoryData,
      _feeCollector,
      overrides || {}
    ) as Promise<P2PFactory>;
  }
  getDeployTransaction(
    _factoryData: string,
    _feeCollector: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _factoryData,
      _feeCollector,
      overrides || {}
    );
  }
  attach(address: string): P2PFactory {
    return super.attach(address) as P2PFactory;
  }
  connect(signer: Signer): P2PFactory__factory {
    return super.connect(signer) as P2PFactory__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): P2PFactoryInterface {
    return new utils.Interface(_abi) as P2PFactoryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): P2PFactory {
    return new Contract(address, _abi, signerOrProvider) as P2PFactory;
  }
}
