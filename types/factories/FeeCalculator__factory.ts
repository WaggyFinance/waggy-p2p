/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { FeeCalculator, FeeCalculatorInterface } from "../FeeCalculator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "calculateFee",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_rate",
        type: "uint256",
      },
    ],
    name: "updateFeeRate",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052601960015534801561001557600080fd5b5061003261002761003760201b60201c565b61003f60201b60201c565b610103565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6107ad806101126000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063715018a61461005c5780637b84fda5146100665780638da5cb5b1461008257806399a5d747146100a0578063f2fde38b146100d0575b600080fd5b6100646100ec565b005b610080600480360381019061007b9190610498565b610174565b005b61008a6101fa565b6040516100979190610525565b60405180910390f35b6100ba60048036038101906100b59190610498565b610223565b6040516100c79190610580565b60405180910390f35b6100ea60048036038101906100e5919061046f565b610255565b005b6100f461034d565b73ffffffffffffffffffffffffffffffffffffffff166101126101fa565b73ffffffffffffffffffffffffffffffffffffffff1614610168576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161015f90610560565b60405180910390fd5b6101726000610355565b565b61017c61034d565b73ffffffffffffffffffffffffffffffffffffffff1661019a6101fa565b73ffffffffffffffffffffffffffffffffffffffff16146101f0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e790610560565b60405180910390fd5b8060018190555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600061024e6127106102406001548561041990919063ffffffff16565b61042f90919063ffffffff16565b9050919050565b61025d61034d565b73ffffffffffffffffffffffffffffffffffffffff1661027b6101fa565b73ffffffffffffffffffffffffffffffffffffffff16146102d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c890610560565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610341576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161033890610540565b60405180910390fd5b61034a81610355565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000818361042791906105dd565b905092915050565b6000818361043d91906105ac565b905092915050565b60008135905061045481610749565b92915050565b60008135905061046981610760565b92915050565b60006020828403121561048157600080fd5b600061048f84828501610445565b91505092915050565b6000602082840312156104aa57600080fd5b60006104b88482850161045a565b91505092915050565b6104ca81610637565b82525050565b60006104dd60268361059b565b91506104e8826106d1565b604082019050919050565b600061050060208361059b565b915061050b82610720565b602082019050919050565b61051f81610669565b82525050565b600060208201905061053a60008301846104c1565b92915050565b60006020820190508181036000830152610559816104d0565b9050919050565b60006020820190508181036000830152610579816104f3565b9050919050565b60006020820190506105956000830184610516565b92915050565b600082825260208201905092915050565b60006105b782610669565b91506105c283610669565b9250826105d2576105d16106a2565b5b828204905092915050565b60006105e882610669565b91506105f383610669565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561062c5761062b610673565b5b828202905092915050565b600061064282610649565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61075281610637565b811461075d57600080fd5b50565b61076981610669565b811461077457600080fd5b5056fea2646970667358221220b89f80a920851b5781c5fe75ee159b59340a4f1929d9f86322a5f40d4c7118f464736f6c63430008040033";

export class FeeCalculator__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FeeCalculator> {
    return super.deploy(overrides || {}) as Promise<FeeCalculator>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FeeCalculator {
    return super.attach(address) as FeeCalculator;
  }
  connect(signer: Signer): FeeCalculator__factory {
    return super.connect(signer) as FeeCalculator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeCalculatorInterface {
    return new utils.Interface(_abi) as FeeCalculatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FeeCalculator {
    return new Contract(address, _abi, signerOrProvider) as FeeCalculator;
  }
}
