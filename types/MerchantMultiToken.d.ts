/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerchantMultiTokenInterface extends ethers.utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "admins(uint256)": FunctionFragment;
    "appeal(string,address,address,address,uint256)": FunctionFragment;
    "approveTransaction(address,uint256,address)": FunctionFragment;
    "blackListUser()": FunctionFragment;
    "cancelTransactionSeller(address,string)": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "depositNative()": FunctionFragment;
    "feeCalculator()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "fetchTransactionApproved(address,address)": FunctionFragment;
    "getBuyerTransaction(address,address)": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getTransactionByIndex(address,address,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "lockTokenInfo(address,address)": FunctionFragment;
    "lockUserTokenInfo(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerClaimToken(address)": FunctionFragment;
    "releaseTokenByAdmin(address,address,address)": FunctionFragment;
    "releaseTokenBySeller(address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "revokeRoles(address[])": FunctionFragment;
    "setAdmins(address[])": FunctionFragment;
    "setAllowTokens(address[],bool)": FunctionFragment;
    "setBlackList(address)": FunctionFragment;
    "setValidator(address)": FunctionFragment;
    "setWBNB(address)": FunctionFragment;
    "setWNativeRelayer(address)": FunctionFragment;
    "shopBalance(address,address)": FunctionFragment;
    "shopLockBalance(address,address)": FunctionFragment;
    "successTransactionCount(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalLockBalance(address,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockTokenByAdmin(address,address)": FunctionFragment;
    "updateFeeCalculator(address)": FunctionFragment;
    "validator()": FunctionFragment;
    "wbnb()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "withdrawNative(uint256)": FunctionFragment;
    "wnativeRelayer()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "admins",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "appeal",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransaction",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "blackListUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransactionSeller",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositNative",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactionApproved",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerTransaction",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionByIndex",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokenInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockUserTokenInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerClaimToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokenByAdmin",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokenBySeller",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "setAdmins", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "setAllowTokens",
    values: [string[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setWBNB", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setWNativeRelayer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shopBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "shopLockBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "successTransactionCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalLockBalance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockTokenByAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCalculator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;
  encodeFunctionData(functionFragment: "wbnb", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNative",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wnativeRelayer",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackListUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransactionSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactionApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockUserTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerClaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokenByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokenBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAllowTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWBNB", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWNativeRelayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shopBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shopLockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalLockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockTokenByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wbnb", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNative",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wnativeRelayer",
    data: BytesLike
  ): Result;

  events: {
    "AppealTransaction(address,address,uint256)": EventFragment;
    "ApproveTransaction(address,address,uint256)": EventFragment;
    "CancelTransaction(address,address,uint256)": EventFragment;
    "DeleteShop(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "OwnerClaimToken(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReleaseToken(address,address,address,uint256)": EventFragment;
    "RevokeRole(address,address[])": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SellerDeposit(address,address,uint256)": EventFragment;
    "SetAdmins(address,address[])": EventFragment;
    "SetBlackList(address,address)": EventFragment;
    "SetValidator(address,address)": EventFragment;
    "SetWBNB(address,address)": EventFragment;
    "SetWNativeRelayer(address,address)": EventFragment;
    "SetupShop(address,address,uint256)": EventFragment;
    "UnlockToken(address,address,uint256)": EventFragment;
    "UpdateFeeCalculator(address,address)": EventFragment;
    "UpdateRewardCalculator(address,address)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppealTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeRole"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetAdmins"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetBlackList"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetValidator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWBNB"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetWNativeRelayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeCalculator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateRewardCalculator"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AppealTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    buyer: string;
    balance: BigNumber;
  }
>;

export type ApproveTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type CancelTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type DeleteShopEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    balance: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type OwnerClaimTokenEvent = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReleaseTokenEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    seller: string;
    buyer: string;
    token: string;
    amount: BigNumber;
  }
>;

export type RevokeRoleEvent = TypedEvent<
  [string, string[]] & { user: string; accounts: string[] }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string] & {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SellerDepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    merchant: string;
    amount: BigNumber;
  }
>;

export type SetAdminsEvent = TypedEvent<
  [string, string[]] & { user: string; admins: string[] }
>;

export type SetBlackListEvent = TypedEvent<
  [string, string] & { user: string; blackList: string }
>;

export type SetValidatorEvent = TypedEvent<
  [string, string] & { user: string; validator: string }
>;

export type SetWBNBEvent = TypedEvent<
  [string, string] & { user: string; wbnb: string }
>;

export type SetWNativeRelayerEvent = TypedEvent<
  [string, string] & { user: string; wnativeRelayer: string }
>;

export type SetupShopEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type UnlockTokenEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    buyer: string;
    amount: BigNumber;
  }
>;

export type UpdateFeeCalculatorEvent = TypedEvent<
  [string, string] & { user: string; feeCalculator: string }
>;

export type UpdateRewardCalculatorEvent = TypedEvent<
  [string, string] & { user: string; rewardCalculator: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export class MerchantMultiToken extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerchantMultiTokenInterface;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _token: string,
      _remark: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveTransaction(
      _token: string,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blackListUser(overrides?: CallOverrides): Promise<[string]>;

    cancelTransactionSeller(
      _seller: string,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<[string]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyerTransaction(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updateAt: BigNumber;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerClaimToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseTokenBySeller(
      _buyer: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      _admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmins(
      _admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAllowTokens(
      _token: string[],
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBlackList(
      _blackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWBNB(
      _wbnb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWNativeRelayer(
      _wnativeRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shopBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    shopLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSellAmount: BigNumber;
        totalSellCount: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlockTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;

    wbnb(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawNative(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wnativeRelayer(overrides?: CallOverrides): Promise<[string]>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  appeal(
    _txId: string,
    _seller: string,
    _buyer: string,
    _token: string,
    _remark: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveTransaction(
    _token: string,
    _amount: BigNumberish,
    _buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blackListUser(overrides?: CallOverrides): Promise<string>;

  cancelTransactionSeller(
    _seller: string,
    _remark: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositNative(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCalculator(overrides?: CallOverrides): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  fetchTransactionApproved(
    _seller: string,
    _buyer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyerTransaction(
    _seller: string,
    _buyer: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      status: BigNumber;
      amount: BigNumber;
      remark: string;
      lockAmount: BigNumber;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getTransactionByIndex(
    _seller: string,
    _buyer: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      status: BigNumber;
      amount: BigNumber;
      remark: string;
      lockAmount: BigNumber;
      createdAt: BigNumber;
      updateAt: BigNumber;
    }
  >;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  lockTokenInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockUserTokenInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerClaimToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseTokenByAdmin(
    _seller: string,
    _buyer: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseTokenBySeller(
    _buyer: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    _admins: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmins(
    _admins: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAllowTokens(
    _token: string[],
    _allow: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBlackList(
    _blackList: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWBNB(
    _wbnb: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWNativeRelayer(
    _wnativeRelayer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shopBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  shopLockBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  successTransactionCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalSellAmount: BigNumber;
      totalSellCount: BigNumber;
    }
  >;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalLockBalance(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlockTokenByAdmin(
    _seller: string,
    _buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeCalculator(
    _feeCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  wbnb(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawNative(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wnativeRelayer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _token: string,
      _remark: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTransaction(
      _token: string,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blackListUser(overrides?: CallOverrides): Promise<string>;

    cancelTransactionSeller(
      _seller: string,
      _remark: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositNative(overrides?: CallOverrides): Promise<void>;

    feeCalculator(overrides?: CallOverrides): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerTransaction(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updateAt: BigNumber;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerClaimToken(_token: string, overrides?: CallOverrides): Promise<void>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseTokenBySeller(
      _buyer: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(_admins: string[], overrides?: CallOverrides): Promise<void>;

    setAdmins(_admins: string[], overrides?: CallOverrides): Promise<void>;

    setAllowTokens(
      _token: string[],
      _allow: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBlackList(_blackList: string, overrides?: CallOverrides): Promise<void>;

    setValidator(_validator: string, overrides?: CallOverrides): Promise<void>;

    setWBNB(_wbnb: string, overrides?: CallOverrides): Promise<void>;

    setWNativeRelayer(
      _wnativeRelayer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    shopBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shopLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSellAmount: BigNumber;
        totalSellCount: BigNumber;
      }
    >;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;

    wbnb(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawNative(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    wnativeRelayer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AppealTransaction(address,address,uint256)"(
      seller?: null,
      buyer?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; buyer: string; balance: BigNumber }
    >;

    AppealTransaction(
      seller?: null,
      buyer?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; buyer: string; balance: BigNumber }
    >;

    "ApproveTransaction(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    ApproveTransaction(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "CancelTransaction(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    CancelTransaction(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "DeleteShop(address,address,uint256)"(
      seller?: null,
      token?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; balance: BigNumber }
    >;

    DeleteShop(
      seller?: null,
      token?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; balance: BigNumber }
    >;

    "Deposit(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    Deposit(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "OwnerClaimToken(address,address,uint256)"(
      user?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    OwnerClaimToken(
      user?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ReleaseToken(address,address,address,uint256)"(
      seller?: null,
      buyer?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { seller: string; buyer: string; token: string; amount: BigNumber }
    >;

    ReleaseToken(
      seller?: null,
      buyer?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { seller: string; buyer: string; token: string; amount: BigNumber }
    >;

    "RevokeRole(address,address[])"(
      user?: null,
      accounts?: null
    ): TypedEventFilter<
      [string, string[]],
      { user: string; accounts: string[] }
    >;

    RevokeRole(
      user?: null,
      accounts?: null
    ): TypedEventFilter<
      [string, string[]],
      { user: string; accounts: string[] }
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; previousAdminRole: string; newAdminRole: string }
    >;

    "RoleGranted(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes32,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "SellerDeposit(address,address,uint256)"(
      seller?: null,
      merchant?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; merchant: string; amount: BigNumber }
    >;

    SellerDeposit(
      seller?: null,
      merchant?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; merchant: string; amount: BigNumber }
    >;

    "SetAdmins(address,address[])"(
      user?: null,
      admins?: null
    ): TypedEventFilter<[string, string[]], { user: string; admins: string[] }>;

    SetAdmins(
      user?: null,
      admins?: null
    ): TypedEventFilter<[string, string[]], { user: string; admins: string[] }>;

    "SetBlackList(address,address)"(
      user?: null,
      blackList?: null
    ): TypedEventFilter<[string, string], { user: string; blackList: string }>;

    SetBlackList(
      user?: null,
      blackList?: null
    ): TypedEventFilter<[string, string], { user: string; blackList: string }>;

    "SetValidator(address,address)"(
      user?: null,
      validator?: null
    ): TypedEventFilter<[string, string], { user: string; validator: string }>;

    SetValidator(
      user?: null,
      validator?: null
    ): TypedEventFilter<[string, string], { user: string; validator: string }>;

    "SetWBNB(address,address)"(
      user?: null,
      wbnb?: null
    ): TypedEventFilter<[string, string], { user: string; wbnb: string }>;

    SetWBNB(
      user?: null,
      wbnb?: null
    ): TypedEventFilter<[string, string], { user: string; wbnb: string }>;

    "SetWNativeRelayer(address,address)"(
      user?: null,
      wnativeRelayer?: null
    ): TypedEventFilter<
      [string, string],
      { user: string; wnativeRelayer: string }
    >;

    SetWNativeRelayer(
      user?: null,
      wnativeRelayer?: null
    ): TypedEventFilter<
      [string, string],
      { user: string; wnativeRelayer: string }
    >;

    "SetupShop(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    SetupShop(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "UnlockToken(address,address,uint256)"(
      seller?: null,
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; buyer: string; amount: BigNumber }
    >;

    UnlockToken(
      seller?: null,
      buyer?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; buyer: string; amount: BigNumber }
    >;

    "UpdateFeeCalculator(address,address)"(
      user?: null,
      feeCalculator?: null
    ): TypedEventFilter<
      [string, string],
      { user: string; feeCalculator: string }
    >;

    UpdateFeeCalculator(
      user?: null,
      feeCalculator?: null
    ): TypedEventFilter<
      [string, string],
      { user: string; feeCalculator: string }
    >;

    "UpdateRewardCalculator(address,address)"(
      user?: null,
      rewardCalculator?: null
    ): TypedEventFilter<
      [string, string],
      { user: string; rewardCalculator: string }
    >;

    UpdateRewardCalculator(
      user?: null,
      rewardCalculator?: null
    ): TypedEventFilter<
      [string, string],
      { user: string; rewardCalculator: string }
    >;

    "Withdraw(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    Withdraw(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    admins(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _token: string,
      _remark: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveTransaction(
      _token: string,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blackListUser(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransactionSeller(
      _seller: string,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerTransaction(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerClaimToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseTokenBySeller(
      _buyer: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      _admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmins(
      _admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAllowTokens(
      _token: string[],
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBlackList(
      _blackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWBNB(
      _wbnb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWNativeRelayer(
      _wnativeRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shopBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shopLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlockTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;

    wbnb(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawNative(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wnativeRelayer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    admins(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _token: string,
      _remark: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveTransaction(
      _token: string,
      _amount: BigNumberish,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blackListUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelTransactionSeller(
      _seller: string,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositNative(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyerTransaction(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerClaimToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseTokenBySeller(
      _buyer: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      _admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmins(
      _admins: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAllowTokens(
      _token: string[],
      _allow: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBlackList(
      _blackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWBNB(
      _wbnb: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWNativeRelayer(
      _wnativeRelayer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shopBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalLockBalance(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlockTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wbnb(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawNative(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wnativeRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
