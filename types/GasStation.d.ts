/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GasStationInterface extends ethers.utils.Interface {
  functions: {
    "addCampaignInfo(address,address,uint256)": FunctionFragment;
    "addRewardInfo(uint256,uint256,uint256)": FunctionFragment;
    "campaignInfo(uint256)": FunctionFragment;
    "campaignInfoLen()": FunctionFragment;
    "campaignRewardInfo(uint256,uint256)": FunctionFragment;
    "currentEndBlock(uint256)": FunctionFragment;
    "currentRewardPerBlock(uint256)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "emergencyWithdraw(uint256,uint256)": FunctionFragment;
    "getMultiplier(uint256,uint256,uint256)": FunctionFragment;
    "harvest(uint256,uint256[])": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "massUpdateCampaigns()": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingReward(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardHolder()": FunctionFragment;
    "rewardInfoLen(uint256)": FunctionFragment;
    "setRewardHolder(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateCampaign(uint256)": FunctionFragment;
    "userInfo(uint256,address)": FunctionFragment;
    "withdraw(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addCampaignInfo",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addRewardInfo",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "campaignInfoLen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "campaignRewardInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEndBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentRewardPerBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMultiplier",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "massUpdateCampaigns",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardHolder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardInfoLen",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardHolder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaign",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addCampaignInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignInfoLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "campaignRewardInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEndBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentRewardPerBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "massUpdateCampaigns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardInfoLen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AddCampaignInfo(uint256,address,address,uint256)": EventFragment;
    "AddRewardInfo(uint256,uint256,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "EmergencyWithdraw(address,uint256,uint256)": EventFragment;
    "Havest(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SetRewardHolder(address)": EventFragment;
    "Withdraw(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddCampaignInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddRewardInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Havest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetRewardHolder"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AddCampaignInfoEvent = TypedEvent<
  [BigNumber, string, string, BigNumber] & {
    campaignID: BigNumber;
    stakingToken: string;
    rewardToken: string;
    startBlock: BigNumber;
  }
>;

export type AddRewardInfoEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber] & {
    campaignID: BigNumber;
    phase: BigNumber;
    endBlock: BigNumber;
    rewardPerBlock: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    campaign: BigNumber;
  }
>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    campaign: BigNumber;
  }
>;

export type HavestEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    campaign: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type SetRewardHolderEvent = TypedEvent<
  [string] & { rewardHolder: string }
>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    amount: BigNumber;
    campaign: BigNumber;
  }
>;

export class GasStation extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GasStationInterface;

  functions: {
    addCampaignInfo(
      _stakingToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addRewardInfo(
      _campaignID: BigNumberish,
      _endBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    campaignInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingToken: string;
        rewardToken: string;
        startBlock: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        totalStaked: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    campaignInfoLen(overrides?: CallOverrides): Promise<[BigNumber]>;

    campaignRewardInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        endBlock: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    currentEndBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    currentRewardPerBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    harvest(
      _campaignID: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _rewardHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    massUpdateCampaigns(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingReward(
      _campaignID: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardHolder(overrides?: CallOverrides): Promise<[string]>;

    rewardInfoLen(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setRewardHolder(
      _rewardHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateCampaign(
      _campaignID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        depositBlock: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    withdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addCampaignInfo(
    _stakingToken: string,
    _rewardToken: string,
    _startBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addRewardInfo(
    _campaignID: BigNumberish,
    _endBlock: BigNumberish,
    _rewardPerBlock: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  campaignInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      stakingToken: string;
      rewardToken: string;
      startBlock: BigNumber;
      lastRewardBlock: BigNumber;
      accRewardPerShare: BigNumber;
      totalStaked: BigNumber;
      totalRewards: BigNumber;
    }
  >;

  campaignInfoLen(overrides?: CallOverrides): Promise<BigNumber>;

  campaignRewardInfo(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { endBlock: BigNumber; rewardPerBlock: BigNumber }
  >;

  currentEndBlock(
    _campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  currentRewardPerBlock(
    _campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _campaignID: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdraw(
    _campaignID: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getMultiplier(
    _from: BigNumberish,
    _to: BigNumberish,
    _endBlock: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  harvest(
    _campaignID: BigNumberish,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _rewardHolder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  massUpdateCampaigns(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingReward(
    _campaignID: BigNumberish,
    _user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardHolder(overrides?: CallOverrides): Promise<string>;

  rewardInfoLen(
    _campaignID: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setRewardHolder(
    _rewardHolder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateCampaign(
    _campaignID: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber;
      depositBlock: BigNumber;
      rewardDebt: BigNumber;
    }
  >;

  withdraw(
    _campaignID: BigNumberish,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addCampaignInfo(
      _stakingToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    addRewardInfo(
      _campaignID: BigNumberish,
      _endBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    campaignInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        stakingToken: string;
        rewardToken: string;
        startBlock: BigNumber;
        lastRewardBlock: BigNumber;
        accRewardPerShare: BigNumber;
        totalStaked: BigNumber;
        totalRewards: BigNumber;
      }
    >;

    campaignInfoLen(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRewardInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        endBlock: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    currentEndBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRewardPerBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _campaignID: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_rewardHolder: string, overrides?: CallOverrides): Promise<void>;

    massUpdateCampaigns(overrides?: CallOverrides): Promise<void>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingReward(
      _campaignID: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardHolder(overrides?: CallOverrides): Promise<string>;

    rewardInfoLen(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardHolder(
      _rewardHolder: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateCampaign(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber;
        depositBlock: BigNumber;
        rewardDebt: BigNumber;
      }
    >;

    withdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddCampaignInfo(uint256,address,address,uint256)"(
      campaignID?: BigNumberish | null,
      stakingToken?: null,
      rewardToken?: null,
      startBlock?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        campaignID: BigNumber;
        stakingToken: string;
        rewardToken: string;
        startBlock: BigNumber;
      }
    >;

    AddCampaignInfo(
      campaignID?: BigNumberish | null,
      stakingToken?: null,
      rewardToken?: null,
      startBlock?: null
    ): TypedEventFilter<
      [BigNumber, string, string, BigNumber],
      {
        campaignID: BigNumber;
        stakingToken: string;
        rewardToken: string;
        startBlock: BigNumber;
      }
    >;

    "AddRewardInfo(uint256,uint256,uint256,uint256)"(
      campaignID?: BigNumberish | null,
      phase?: BigNumberish | null,
      endBlock?: null,
      rewardPerBlock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        campaignID: BigNumber;
        phase: BigNumber;
        endBlock: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    AddRewardInfo(
      campaignID?: BigNumberish | null,
      phase?: BigNumberish | null,
      endBlock?: null,
      rewardPerBlock?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, BigNumber],
      {
        campaignID: BigNumber;
        phase: BigNumber;
        endBlock: BigNumber;
        rewardPerBlock: BigNumber;
      }
    >;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      campaign?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    Deposit(
      user?: string | null,
      amount?: null,
      campaign?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    "EmergencyWithdraw(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      campaign?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    EmergencyWithdraw(
      user?: string | null,
      amount?: null,
      campaign?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    "Havest(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      campaign?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    Havest(
      user?: string | null,
      amount?: null,
      campaign?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "SetRewardHolder(address)"(
      rewardHolder?: null
    ): TypedEventFilter<[string], { rewardHolder: string }>;

    SetRewardHolder(
      rewardHolder?: null
    ): TypedEventFilter<[string], { rewardHolder: string }>;

    "Withdraw(address,uint256,uint256)"(
      user?: string | null,
      amount?: null,
      campaign?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;

    Withdraw(
      user?: string | null,
      amount?: null,
      campaign?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; amount: BigNumber; campaign: BigNumber }
    >;
  };

  estimateGas: {
    addCampaignInfo(
      _stakingToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addRewardInfo(
      _campaignID: BigNumberish,
      _endBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    campaignInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    campaignInfoLen(overrides?: CallOverrides): Promise<BigNumber>;

    campaignRewardInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEndBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentRewardPerBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _campaignID: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _rewardHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    massUpdateCampaigns(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReward(
      _campaignID: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardHolder(overrides?: CallOverrides): Promise<BigNumber>;

    rewardInfoLen(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setRewardHolder(
      _rewardHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateCampaign(
      _campaignID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addCampaignInfo(
      _stakingToken: string,
      _rewardToken: string,
      _startBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addRewardInfo(
      _campaignID: BigNumberish,
      _endBlock: BigNumberish,
      _rewardPerBlock: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    campaignInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    campaignInfoLen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    campaignRewardInfo(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEndBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentRewardPerBlock(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getMultiplier(
      _from: BigNumberish,
      _to: BigNumberish,
      _endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _campaignID: BigNumberish,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _rewardHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    massUpdateCampaigns(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReward(
      _campaignID: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardHolder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardInfoLen(
      _campaignID: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setRewardHolder(
      _rewardHolder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateCampaign(
      _campaignID: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _campaignID: BigNumberish,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
