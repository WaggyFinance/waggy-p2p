/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerchantInterface extends ethers.utils.Interface {
  functions: {
    "appeal(string,address,address,uint256)": FunctionFragment;
    "approveTransaction(uint256,address)": FunctionFragment;
    "blackListUser()": FunctionFragment;
    "cancelTransactionSeller(string,address,string)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "feeCalculator()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "fetchTransactionApproved(address,address)": FunctionFragment;
    "getBuyerTransaction(address,address)": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "getTransactionByIndex(address,address,uint256)": FunctionFragment;
    "gov()": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "lockTokenInfo(address,address)": FunctionFragment;
    "lockUserTokenInfo(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerClaimToken()": FunctionFragment;
    "releaseTokenByAdmin(address,address)": FunctionFragment;
    "releaseTokenBySeller(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardCalculator()": FunctionFragment;
    "setBlackList(address)": FunctionFragment;
    "setValidator(address)": FunctionFragment;
    "shopBalance(address)": FunctionFragment;
    "shopLockBalance(address)": FunctionFragment;
    "successTransactionCount(address)": FunctionFragment;
    "token()": FunctionFragment;
    "totalLockBalance(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeCalculator(address)": FunctionFragment;
    "updateRewardCalculator(address)": FunctionFragment;
    "validator()": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "appeal",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveTransaction",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "blackListUser",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransactionSeller",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactionApproved",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuyerTransaction",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionByIndex",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockTokenInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lockUserTokenInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerClaimToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokenByAdmin",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "releaseTokenBySeller",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setBlackList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "shopBalance", values: [string]): string;
  encodeFunctionData(
    functionFragment: "shopLockBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "successTransactionCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalLockBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardCalculator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "appeal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackListUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransactionSeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactionApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuyerTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockUserTokenInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerClaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokenByAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseTokenBySeller",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlackList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shopBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shopLockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "successTransactionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalLockBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AppealTransaction(address,address,uint256)": EventFragment;
    "ApproveTransaction(address,address,uint256)": EventFragment;
    "CancelTransaction(address,address,uint256)": EventFragment;
    "DeleteShop(address,address,uint256)": EventFragment;
    "Deposit(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReleaseToken(address,address,address,uint256,uint256)": EventFragment;
    "SellerDeposit(address,address,uint256)": EventFragment;
    "SetupShop(address,address,uint256)": EventFragment;
    "Withdraw(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AppealTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellerDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type AppealTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    buyer: string;
    balance: BigNumber;
  }
>;

export type ApproveTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type CancelTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type DeleteShopEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    balance: BigNumber;
  }
>;

export type DepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReleaseTokenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    seller: string;
    buyer: string;
    token: string;
    amount: BigNumber;
    reward: BigNumber;
  }
>;

export type SellerDepositEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    merchant: string;
    amount: BigNumber;
  }
>;

export type SetupShopEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber] & {
    seller: string;
    token: string;
    amount: BigNumber;
  }
>;

export class Merchant extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerchantInterface;

  functions: {
    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    approveTransaction(
      _amount: BigNumberish,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    blackListUser(overrides?: CallOverrides): Promise<[string]>;

    cancelTransactionSeller(
      _txId: string,
      _buyer: string,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<[string]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBuyerTransaction(
      _merchant: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updateAt: BigNumber;
      }
    >;

    gov(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _feeCollector: string,
      _blackListUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerClaimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseTokenBySeller(
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardCalculator(overrides?: CallOverrides): Promise<[string]>;

    setBlackList(
      _blackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    shopBalance(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    shopLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSellAmount: BigNumber;
        totalSellCount: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    totalLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  appeal(
    _txId: string,
    _seller: string,
    _buyer: string,
    _remark: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  approveTransaction(
    _amount: BigNumberish,
    _buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  blackListUser(overrides?: CallOverrides): Promise<string>;

  cancelTransactionSeller(
    _txId: string,
    _buyer: string,
    _remark: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCalculator(overrides?: CallOverrides): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  fetchTransactionApproved(
    _seller: string,
    _buyer: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBuyerTransaction(
    _merchant: string,
    _buyer: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      status: BigNumber;
      amount: BigNumber;
      remark: string;
      lockAmount: BigNumber;
      createdAt: BigNumber;
      updatedAt: BigNumber;
    }
  >;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  getTransactionByIndex(
    _seller: string,
    _buyer: string,
    _index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
      status: BigNumber;
      amount: BigNumber;
      remark: string;
      lockAmount: BigNumber;
      createdAt: BigNumber;
      updateAt: BigNumber;
    }
  >;

  gov(overrides?: CallOverrides): Promise<string>;

  initialize(
    _token: string,
    _gov: string,
    _rewardCalculator: string,
    _feeCalculator: string,
    _feeCollector: string,
    _blackListUser: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockTokenInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockUserTokenInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerClaimToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseTokenByAdmin(
    _seller: string,
    _buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseTokenBySeller(
    _buyer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardCalculator(overrides?: CallOverrides): Promise<string>;

  setBlackList(
    _blackList: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  shopBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  shopLockBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  successTransactionCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      totalSellAmount: BigNumber;
      totalSellCount: BigNumber;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  totalLockBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeCalculator(
    _feeCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardCalculator(
    _rewardCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveTransaction(
      _amount: BigNumberish,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    blackListUser(overrides?: CallOverrides): Promise<string>;

    cancelTransactionSeller(
      _txId: string,
      _buyer: string,
      _remark: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    feeCalculator(overrides?: CallOverrides): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerTransaction(
      _merchant: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updatedAt: BigNumber;
      }
    >;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, BigNumber, BigNumber, BigNumber] & {
        status: BigNumber;
        amount: BigNumber;
        remark: string;
        lockAmount: BigNumber;
        createdAt: BigNumber;
        updateAt: BigNumber;
      }
    >;

    gov(overrides?: CallOverrides): Promise<string>;

    initialize(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _feeCollector: string,
      _blackListUser: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerClaimToken(overrides?: CallOverrides): Promise<void>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    releaseTokenBySeller(
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardCalculator(overrides?: CallOverrides): Promise<string>;

    setBlackList(_blackList: string, overrides?: CallOverrides): Promise<void>;

    setValidator(_validator: string, overrides?: CallOverrides): Promise<void>;

    shopBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    shopLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        totalSellAmount: BigNumber;
        totalSellCount: BigNumber;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    totalLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;

    withdraw(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AppealTransaction(address,address,uint256)"(
      seller?: null,
      buyer?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; buyer: string; balance: BigNumber }
    >;

    AppealTransaction(
      seller?: null,
      buyer?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; buyer: string; balance: BigNumber }
    >;

    "ApproveTransaction(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    ApproveTransaction(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "CancelTransaction(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    CancelTransaction(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "DeleteShop(address,address,uint256)"(
      seller?: null,
      token?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; balance: BigNumber }
    >;

    DeleteShop(
      seller?: null,
      token?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; balance: BigNumber }
    >;

    "Deposit(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    Deposit(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ReleaseToken(address,address,address,uint256,uint256)"(
      seller?: null,
      buyer?: null,
      token?: null,
      amount?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        seller: string;
        buyer: string;
        token: string;
        amount: BigNumber;
        reward: BigNumber;
      }
    >;

    ReleaseToken(
      seller?: null,
      buyer?: null,
      token?: null,
      amount?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        seller: string;
        buyer: string;
        token: string;
        amount: BigNumber;
        reward: BigNumber;
      }
    >;

    "SellerDeposit(address,address,uint256)"(
      seller?: null,
      merchant?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; merchant: string; amount: BigNumber }
    >;

    SellerDeposit(
      seller?: null,
      merchant?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; merchant: string; amount: BigNumber }
    >;

    "SetupShop(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    SetupShop(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    "Withdraw(address,address,uint256)"(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;

    Withdraw(
      seller?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { seller: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    approveTransaction(
      _amount: BigNumberish,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    blackListUser(overrides?: CallOverrides): Promise<BigNumber>;

    cancelTransactionSeller(
      _txId: string,
      _buyer: string,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBuyerTransaction(
      _merchant: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _feeCollector: string,
      _blackListUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerClaimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseTokenBySeller(
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    setBlackList(
      _blackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    shopBalance(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    shopLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    totalLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    appeal(
      _txId: string,
      _seller: string,
      _buyer: string,
      _remark: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    approveTransaction(
      _amount: BigNumberish,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    blackListUser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelTransactionSeller(
      _txId: string,
      _buyer: string,
      _remark: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchTransactionApproved(
      _seller: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuyerTransaction(
      _merchant: string,
      _buyer: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionByIndex(
      _seller: string,
      _buyer: string,
      _index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _gov: string,
      _rewardCalculator: string,
      _feeCalculator: string,
      _feeCollector: string,
      _blackListUser: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockUserTokenInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerClaimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseTokenByAdmin(
      _seller: string,
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseTokenBySeller(
      _buyer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBlackList(
      _blackList: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    shopBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shopLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    successTransactionCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalLockBalance(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
