/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerchantInterface extends ethers.utils.Interface {
  functions: {
    "approveTransaction(uint256)": FunctionFragment;
    "cancelTransaction(address,uint256)": FunctionFragment;
    "deleteShop()": FunctionFragment;
    "feeCalculator()": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "getFeeCollector()": FunctionFragment;
    "getMerchantStorage()": FunctionFragment;
    "getShopBalance(address)": FunctionFragment;
    "merchantStorage()": FunctionFragment;
    "owner()": FunctionFragment;
    "ownerClaimToken()": FunctionFragment;
    "releaseToken(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardCalculator()": FunctionFragment;
    "setupShop(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFeeCalculator(address)": FunctionFragment;
    "updateRewardCalculator(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTransaction",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteShop",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMerchantStorage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getShopBalance",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "merchantStorage",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerClaimToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "releaseToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardCalculator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setupShop",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeCalculator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardCalculator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deleteShop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerchantStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShopBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "merchantStorage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ownerClaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "releaseToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setupShop", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeCalculator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardCalculator",
    data: BytesLike
  ): Result;

  events: {
    "ApproveTransaction(address,address,uint256)": EventFragment;
    "CancelTransaction(address,address,uint256)": EventFragment;
    "DeleteShop(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReleaseToken(address,address,address,uint256,uint256)": EventFragment;
    "SetupShop(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CancelTransaction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeleteShop"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReleaseToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetupShop"): EventFragment;
}

export type ApproveTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    token: string;
    amount: BigNumber;
  }
>;

export type CancelTransactionEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    token: string;
    amount: BigNumber;
  }
>;

export type DeleteShopEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    token: string;
    balance: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ReleaseTokenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    sender: string;
    receipt: string;
    token: string;
    amount: BigNumber;
    reward: BigNumber;
  }
>;

export type SetupShopEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    token: string;
    amount: BigNumber;
  }
>;

export class Merchant extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerchantInterface;

  functions: {
    approveTransaction(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTransaction(
      _address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteShop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<[string]>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    getFeeCollector(overrides?: CallOverrides): Promise<[string]>;

    getMerchantStorage(overrides?: CallOverrides): Promise<[string]>;

    getShopBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    merchantStorage(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    ownerClaimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    releaseToken(
      _receipt: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardCalculator(overrides?: CallOverrides): Promise<[string]>;

    setupShop(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  approveTransaction(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTransaction(
    _address: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteShop(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCalculator(overrides?: CallOverrides): Promise<string>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  getFeeCollector(overrides?: CallOverrides): Promise<string>;

  getMerchantStorage(overrides?: CallOverrides): Promise<string>;

  getShopBalance(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  merchantStorage(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  ownerClaimToken(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  releaseToken(
    _receipt: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardCalculator(overrides?: CallOverrides): Promise<string>;

  setupShop(
    _amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeCalculator(
    _feeCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateRewardCalculator(
    _rewardCalculator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    approveTransaction(
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTransaction(
      _address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    deleteShop(overrides?: CallOverrides): Promise<void>;

    feeCalculator(overrides?: CallOverrides): Promise<string>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    getFeeCollector(overrides?: CallOverrides): Promise<string>;

    getMerchantStorage(overrides?: CallOverrides): Promise<string>;

    getShopBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merchantStorage(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    ownerClaimToken(overrides?: CallOverrides): Promise<void>;

    releaseToken(
      _receipt: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardCalculator(overrides?: CallOverrides): Promise<string>;

    setupShop(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ApproveTransaction(address,address,uint256)"(
      owner?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    ApproveTransaction(
      owner?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    "CancelTransaction(address,address,uint256)"(
      owner?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    CancelTransaction(
      owner?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    "DeleteShop(address,address,uint256)"(
      owner?: null,
      token?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; balance: BigNumber }
    >;

    DeleteShop(
      owner?: null,
      token?: null,
      balance?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; balance: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ReleaseToken(address,address,address,uint256,uint256)"(
      sender?: null,
      receipt?: null,
      token?: null,
      amount?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        receipt: string;
        token: string;
        amount: BigNumber;
        reward: BigNumber;
      }
    >;

    ReleaseToken(
      sender?: null,
      receipt?: null,
      token?: null,
      amount?: null,
      reward?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        receipt: string;
        token: string;
        amount: BigNumber;
        reward: BigNumber;
      }
    >;

    "SetupShop(address,address,uint256)"(
      owner?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;

    SetupShop(
      owner?: null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; token: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    approveTransaction(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTransaction(
      _address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteShop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getFeeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    getMerchantStorage(overrides?: CallOverrides): Promise<BigNumber>;

    getShopBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    merchantStorage(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    ownerClaimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    releaseToken(
      _receipt: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardCalculator(overrides?: CallOverrides): Promise<BigNumber>;

    setupShop(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTransaction(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTransaction(
      _address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteShop(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFeeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMerchantStorage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShopBalance(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    merchantStorage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerClaimToken(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    releaseToken(
      _receipt: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardCalculator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setupShop(
      _amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeCalculator(
      _feeCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateRewardCalculator(
      _rewardCalculator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
