/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MasterWaggyInterface extends ethers.utils.Interface {
  functions: {
    "addPool(address)": FunctionFragment;
    "claimAll()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "distributeReward(address,uint256)": FunctionFragment;
    "dividend(address,uint256)": FunctionFragment;
    "getPendingReward(address,address)": FunctionFragment;
    "getPoolInfo(address)": FunctionFragment;
    "getTotalValueLock()": FunctionFragment;
    "getUserStakeInfo(address,address)": FunctionFragment;
    "harvest(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "withdraw(address,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addPool", values: [string]): string;
  encodeFunctionData(functionFragment: "claimAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeReward",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "dividend",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingReward",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "getPoolInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalValueLock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserStakeInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "harvest",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "distributeReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dividend", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalValueLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserStakeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "ADD_POOL(address)": EventFragment;
    "DEPOSIT(address,address,uint256)": EventFragment;
    "DIVIDEND(address,address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WITHDRAW(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ADD_POOL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DEPOSIT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DIVIDEND"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WITHDRAW"): EventFragment;
}

export type ADD_POOLEvent = TypedEvent<[string] & { _rewardToken: string }>;

export type DEPOSITEvent = TypedEvent<
  [string, string, BigNumber] & {
    _rewardToken: string;
    _user: string;
    _amount: BigNumber;
  }
>;

export type DIVIDENDEvent = TypedEvent<
  [string, string, BigNumber] & {
    _rewardToken: string;
    _user: string;
    _amount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type WITHDRAWEvent = TypedEvent<
  [string, string, BigNumber] & {
    _rewardToken: string;
    _user: string;
    _amount: BigNumber;
  }
>;

export class MasterWaggy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MasterWaggyInterface;

  functions: {
    addPool(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    distributeReward(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    dividend(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPendingReward(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPoolInfo(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        users: string[];
        totalDeposit: BigNumber;
        fund: BigNumber;
      }
    >;

    getTotalValueLock(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUserStakeInfo(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalStaking: BigNumber;
        rewardDebt: BigNumber;
        depositTime: BigNumber;
      }
    >;

    harvest(
      _for: string,
      _poolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusDebt: BigNumber;
        fundedBy: string;
        depositTime: BigNumber;
      }
    >;

    withdraw(
      _for: string,
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addPool(
    _rewardToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimAll(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _poolToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  distributeReward(
    _poolToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  dividend(
    _poolToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPendingReward(
    _for: string,
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPoolInfo(
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string[], BigNumber, BigNumber] & {
      lastRewardBlock: BigNumber;
      users: string[];
      totalDeposit: BigNumber;
      fund: BigNumber;
    }
  >;

  getTotalValueLock(overrides?: CallOverrides): Promise<BigNumber>;

  getUserStakeInfo(
    _for: string,
    _poolToken: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalStaking: BigNumber;
      rewardDebt: BigNumber;
      depositTime: BigNumber;
    }
  >;

  harvest(
    _for: string,
    _poolToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
      amount: BigNumber;
      rewardDebt: BigNumber;
      bonusDebt: BigNumber;
      fundedBy: string;
      depositTime: BigNumber;
    }
  >;

  withdraw(
    _for: string,
    _poolToken: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addPool(_rewardToken: string, overrides?: CallOverrides): Promise<void>;

    claimAll(overrides?: CallOverrides): Promise<void>;

    deposit(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeReward(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    dividend(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getPendingReward(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string[], BigNumber, BigNumber] & {
        lastRewardBlock: BigNumber;
        users: string[];
        totalDeposit: BigNumber;
        fund: BigNumber;
      }
    >;

    getTotalValueLock(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakeInfo(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalStaking: BigNumber;
        rewardDebt: BigNumber;
        depositTime: BigNumber;
      }
    >;

    harvest(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, string, BigNumber] & {
        amount: BigNumber;
        rewardDebt: BigNumber;
        bonusDebt: BigNumber;
        fundedBy: string;
        depositTime: BigNumber;
      }
    >;

    withdraw(
      _for: string,
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ADD_POOL(address)"(
      _rewardToken?: null
    ): TypedEventFilter<[string], { _rewardToken: string }>;

    ADD_POOL(
      _rewardToken?: null
    ): TypedEventFilter<[string], { _rewardToken: string }>;

    "DEPOSIT(address,address,uint256)"(
      _rewardToken?: null,
      _user?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _rewardToken: string; _user: string; _amount: BigNumber }
    >;

    DEPOSIT(
      _rewardToken?: null,
      _user?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _rewardToken: string; _user: string; _amount: BigNumber }
    >;

    "DIVIDEND(address,address,uint256)"(
      _rewardToken?: null,
      _user?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _rewardToken: string; _user: string; _amount: BigNumber }
    >;

    DIVIDEND(
      _rewardToken?: null,
      _user?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _rewardToken: string; _user: string; _amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "WITHDRAW(address,address,uint256)"(
      _rewardToken?: null,
      _user?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _rewardToken: string; _user: string; _amount: BigNumber }
    >;

    WITHDRAW(
      _rewardToken?: null,
      _user?: null,
      _amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { _rewardToken: string; _user: string; _amount: BigNumber }
    >;
  };

  estimateGas: {
    addPool(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    distributeReward(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    dividend(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPendingReward(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolInfo(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalValueLock(overrides?: CallOverrides): Promise<BigNumber>;

    getUserStakeInfo(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    harvest(
      _for: string,
      _poolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _for: string,
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addPool(
      _rewardToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimAll(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    distributeReward(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    dividend(
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPendingReward(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolInfo(
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalValueLock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserStakeInfo(
      _for: string,
      _poolToken: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    harvest(
      _for: string,
      _poolToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _for: string,
      _poolToken: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
